package cosc2425lab7sp23;

public class PasswordVerifier {
    public static boolean isValid(String pw) {  // Created the method isValid to set the qualifications for the password
    	
    	boolean UpperCase = false;
        boolean Lowercase = false;
        boolean Digit = false;
        boolean Symbol = false;  // Set my booleans so that I can verify each respective quality of the password
    	
        if (pw.length() < 16 || pw.length() > 20) {
            return false;  // Makes it so that the password has a minimum of 16 characters and a maximum of 20 characters for the password. Any more and it is false
        }
             
        for (int c = 0; c < pw.length(); c++) {  // For loop to check each parameter of a password
        	
            char letter = pw.charAt(c);  // The characters in the password
            
            if (Character.isUpperCase(letter)) {
            	UpperCase = true;  // Checks to see if the password character has an uppercase
            } 
            
            else if (Character.isLowerCase(letter)) {
            	Lowercase = true;  // Checks to see if the password character has an lowercase
            } 
            
            else if (Character.isDigit(letter)) {
            	Digit = true;  // Checks to see if the password character has an digit
            } 
            
            else {
            	Symbol = true; // If there are no if statements that run, it returns that the password has a symbol
            }
        }
        
        return UpperCase && Lowercase && Digit && Symbol;  
    }
}


package cosc2425lab7sp23test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.Assert.*;

import org.junit.jupiter.api.Test;

import cosc2425lab7sp23.PasswordVerifier;

class PasswordVerifierTest {

	@Test
	public void validatePassword_ShortPW() {
		// setup
		String shortPW = "Abcde5#";
		// execute
		boolean shortActual = PasswordVerifier.isValid(shortPW);
		// assert
		assertFalse("Testing Password if pw is to short", shortActual);

	}

	@Test
	public void validatePassword_longPW() {
		// setup
		String longPW = "Abcdefghijklmnp5#abcde";
		// execute
		boolean longActual = PasswordVerifier.isValid(longPW);
		// assert
		assertFalse("Testing Password less than twenty characters", longActual);
	}

	@Test
	public void validatePassword_EmptyPW() {
		// setup
		String emptyPW = "";

		// execute
		boolean emptyActual = PasswordVerifier.isValid(emptyPW);

		// assert
		assertFalse("Testing Password wont accept empty string", emptyActual);
	}

	@Test
	public void validatePassword_MissingNumber() {
		// setup
		String missingNumberPW = "Abcdefghijklmnp#";

		// execute
		boolean missingNumberActual = PasswordVerifier.isValid(missingNumberPW);

		// assert
		assertFalse("Testing Password missing a number", missingNumberActual);
	}

	@Test
	public void validatePassword_MissingUpperCaseLetter() {
		// setup
		String missingUpperCaseLetterPW = "abcdefghijklmnp5#";

		// execute
		boolean missingUpperCaseLetterActual = PasswordVerifier.isValid(missingUpperCaseLetterPW);

		// assert
		assertFalse("Testing Password missing an upper case", missingUpperCaseLetterActual);
	}

	@Test
	public void validatePassword_Missing_LowerCaseLetter() {
		// setup
		String missingLowerCaseLetterPW = "ABCDEFGHIJKLMNP5#";

		// execute
		boolean missingLowerCaseLetterActual = PasswordVerifier.isValid(missingLowerCaseLetterPW);

		// assert
		assertFalse("Testing Password missing a lower case", missingLowerCaseLetterActual);
	}

	@Test
	public void validatePassword_Missing_Symbol() {
		// setup
		String missingSymbolPW = "aBCDEFGHIJKLMNP5";

		// execute
		boolean missingSymbolActual = PasswordVerifier.isValid(missingSymbolPW);

		// assert
		assertFalse("Testing Password missing a symbol", missingSymbolActual);
	}

	@Test
	public void validatePassword_ValidPW() {
		// setup
		String validPW = "aBCDEFGHIJKLMNP5#";

		// execute
		boolean validActual = PasswordVerifier.isValid(validPW);

		// assert
		assertTrue("Testing a valid Password", validActual);
	}

}
